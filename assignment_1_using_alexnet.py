# -*- coding: utf-8 -*-
"""ASSIGNMENT 1 USING ALEXNET (SAREENA 318)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AO-BzgQq8UI7dASmXL3M3OFKu5YE1FVm
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import cv2
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Define the directory paths where your images are stored
base_dir = '/content/drive/MyDrive/archive (5)/train'

# List of eye states
eye_states = ['Closed_Eyes', 'Open_Eyes']



# Display sample images for each eye state
sample_images = {eye_state: [] for eye_state in eye_states}

for eye_state in eye_states:
    eye_state_dir = os.path.join(base_dir, eye_state)
    image_files = os.listdir(eye_state_dir)

    # Display the first few images from each eye state
    for i in range(5):
        image = cv2.imread(os.path.join(eye_state_dir, image_files[i]))
        sample_images[eye_state].append(image)

# Plot sample images
plt.figure(figsize=(15, 10))
for i, eye_state in enumerate(eye_states):
    for j, image in enumerate(sample_images[eye_state]):
        plt.subplot(5, len(eye_states), i * 5 + j + 1)
        plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        plt.title(f'{eye_state} Sample {j + 1}')
        plt.axis('off')

plt.show()



# Initialize a LabelEncoder to encode eye states
label_encoder = LabelEncoder()

# Initialize lists to store images and corresponding labels
images = []
labels = []

# Load and preprocess images
for eye_state in eye_states:
    eye_state_dir = os.path.join(base_dir, eye_state)
    image_files = os.listdir(eye_state_dir)

    for file in image_files:
        image = cv2.imread(os.path.join(eye_state_dir, file))
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert to RGB
        image = cv2.resize(image, (224, 224))  # Resize images to 224x224
        images.append(image)
        labels.append(eye_state)

# Encode the labels using label encoding
label_encoder.fit(labels)  # Fit the encoder with the labels
encoded_labels = label_encoder.transform(labels)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(images, encoded_labels, test_size=0.2, random_state=42)

# Data scaling (normalize pixel values)
X_train, X_test = np.array(X_train) / 255.0, np.array(X_test) / 255.0

# Data augmentation
datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    zoom_range=0.2,
    shear_range=0.2
)
datagen.fit(X_train)

# Build an AlexNet model
input_layer = Input(shape=(224, 224, 3))
x = Conv2D(96, (11, 11), strides=(4, 4), activation='relu')(input_layer)
x = MaxPooling2D(pool_size=(3, 3), strides=(2, 2))(x)
x = Conv2D(256, (5, 5), activation='relu')(x)
x = MaxPooling2D(pool_size=(3, 3), strides=(2, 2))(x)
x = Conv2D(384, (3, 3), activation='relu')(x)
x = Conv2D(384, (3, 3), activation='relu')(x)
x = Conv2D(256, (3, 3), activation='relu')(x)
x = MaxPooling2D(pool_size=(3, 3), strides=(2, 2))(x)
x = Flatten()(x)
x = Dense(4096, activation='relu')(x)
x = Dropout(0.5)(x)
x = Dense(4096, activation='relu')(x)
x = Dropout(0.5)(x)
output_layer = Dense(2, activation='softmax')(x)

model = Model(inputs=input_layer, outputs=output_layer)

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])




# Train the model with data augmentation
history = model.fit(datagen.flow(X_train, y_train, batch_size=32),
                    epochs=10,
                    validation_data=(X_test, y_test))

# Model evaluation
test_loss, test_acc = model.evaluate(X_test, y_test, verbose=2)
print(f'Test accuracy: {test_acc:.4f}')




# Display training and testing graphs
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Testing Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.title('Training and Testing Accuracy')

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Testing Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.title('Training and Testing Loss')

plt.show()